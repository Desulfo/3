{"version":3,"sources":["App.js","index.js"],"names":["getRandomIndex","number","Math","floor","random","App","useState","quoteList","setQuoteList","displayedQuotes","setDisplayedQuotes","currentQuoteIndex","setCurrentQuoteIndex","useEffect","fetch","then","response","json","receivedQuoteList","catch","error","console","length","quote","author","className","onClick","prevQuotes","prevIndex","ReactDOM","render","document","getElementById"],"mappings":"wMAMMA,EAAiB,SAACC,GAEtB,OADoBC,KAAKC,MAAMD,KAAKE,SAAWH,IAwDlCI,MApDf,WACE,MAAkCC,mBAAS,MAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA8CF,mBAAS,MAAvD,mBAAOG,EAAP,KAAwBC,EAAxB,KACA,EAAkDJ,mBAAS,MAA3D,mBAAOK,EAAP,KAA0BC,EAA1B,KA8BA,OAtBAC,qBAAU,WACRC,MAlBF,yIAmBKC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACLV,EAAaU,MAEdC,OAAM,SAACC,GAAD,OAAWC,QAAQD,MAAMA,QACjC,IACHP,qBAAU,WACJN,IACFG,EAAmB,CAACH,EAAUP,EAAeO,EAAUe,WACvDV,EAAqB,MAEtB,CAACL,IACJM,qBAAU,WACJJ,GACFG,EAAqBH,EAAgBa,OAAS,KAE/C,CAACb,IAKF,qCACE,mDACCA,GACC,mCACE,qCAAaA,EAAgBE,GAAmBY,QAChD,4CAAed,EAAgBE,GAAmBa,aAGtD,sBAAKC,UAAU,iBAAf,UACE,wBAAQC,QAtCM,WAClBhB,GAAmB,SAACiB,GAAD,4BACdA,GADc,CAEjBpB,EAAUP,EAAeO,EAAUe,eAmCjC,uBACCX,EAAoB,GACnB,wBAAQe,QAfS,WACvBd,GAAqB,SAACgB,GAAD,OAAeA,EAAY,MAc1C,+BCnDVC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.083c0ab8.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nimport \"./App.css\";\r\n\r\nconst quoteAPI =\r\n  \"https://gist.githubusercontent.com/natebass/b0a548425a73bdf8ea5c618149fe1fce/raw/f4231cd5961f026264bb6bb3a6c41671b044f1f4/quotes.json\";\r\nconst getRandomIndex = (number) => {\r\n  const randomIndex = Math.floor(Math.random() * number);\r\n  return randomIndex;\r\n};\r\n\r\nfunction App() {\r\n  const [quoteList, setQuoteList] = useState(null);\r\n  const [displayedQuotes, setDisplayedQuotes] = useState(null);\r\n  const [currentQuoteIndex, setCurrentQuoteIndex] = useState(null);\r\n\r\n  const getNewQuote = () => {\r\n    setDisplayedQuotes((prevQuotes) => [\r\n      ...prevQuotes,\r\n      quoteList[getRandomIndex(quoteList.length)],\r\n    ]);\r\n  };\r\n  useEffect(() => {\r\n    fetch(quoteAPI)\r\n      .then((response) => response.json())\r\n      .then((receivedQuoteList) => {\r\n        setQuoteList(receivedQuoteList);\r\n      })\r\n      .catch((error) => console.error(error));\r\n  }, []);\r\n  useEffect(() => {\r\n    if (quoteList) {\r\n      setDisplayedQuotes([quoteList[getRandomIndex(quoteList.length)]]);\r\n      setCurrentQuoteIndex(0);\r\n    }\r\n  }, [quoteList]);\r\n  useEffect(() => {\r\n    if (displayedQuotes) {\r\n      setCurrentQuoteIndex(displayedQuotes.length - 1);\r\n    }\r\n  }, [displayedQuotes]);\r\n  const displayPrevQuote = () => {\r\n    setCurrentQuoteIndex((prevIndex) => prevIndex - 1);\r\n  };\r\n  return (\r\n    <>\r\n      <h1>Your random qoute</h1>\r\n      {displayedQuotes && (\r\n        <figure>\r\n          <blockquote>{displayedQuotes[currentQuoteIndex].quote}</blockquote>\r\n          <figcaption>- {displayedQuotes[currentQuoteIndex].author}</figcaption>\r\n        </figure>\r\n      )}\r\n      <div className=\"buttonsWrapper\">\r\n        <button onClick={getNewQuote}>New quote</button>\r\n        {currentQuoteIndex > 0 && (\r\n          <button onClick={displayPrevQuote}>Prev quote</button>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}